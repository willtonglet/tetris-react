{"version":3,"sources":["gameHelpers.js","components/Tetris/styles.js","tetrominos.js","hooks/useStage.js","components/Stage/styles.js","components/Cell/styles.js","components/Cell/index.js","components/Stage/index.js","components/Display/styles.js","components/Display/index.js","components/StartButton/styles.js","components/StartButton/index.js","components/Tetris/index.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","serviceWorker.js","index.js"],"names":["createStage","Array","from","fill","checkCollision","player","stage","_ref","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","_templateObject","StyledTetris","_templateObject2","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","useStage","resetPlayer","_useState","useState","_useState2","Object","slicedToArray","setStage","_useState3","_useState4","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","concat","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","StyledStage","styles_templateObject","props","height","width","StyledCell","Cell_styles_templateObject","type","React","memo","react_default","a","createElement","Stage","components_Cell","key","StyledDisplay","Display_styles_templateObject","gameOver","Display","text","StyledStartButton","button","StartButton_styles_templateObject","StartButton","callback","onClick","Tetris","dropTime","setDropTime","setGameOver","_useState5","_useState6","isStarted","setIsStarted","mainRef","useRef","_usePlayer","setPlayer","rotate","matrix","dir","rotatedTetro","_","index","col","reverse","useCallback","STAGE_WIDTH","objectSpread2","clonedPlayer","JSON","parse","stringify","offset","usePlayer","_usePlayer2","updatePlayerPos","playerRotate","_useStage","_useStage2","_useGameStatus","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","_useGameStatus2","movePlayer","startGame","current","focus","drop","move","_ref2","keyCode","delay","savedCallback","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","ref","Fragment","components_Display","components_Stage","className","components_StartButton","App","components_Tetris","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4MAGaA,EAAc,kBACzBC,MAAMC,KAAKD,MAHe,IAGM,kBAC9B,IAAIA,MALmB,IAKAE,KAAK,CAAC,EAAG,aAGvBC,EAAiB,SAACC,EAAQC,EAATC,GAC5B,IADuE,IAAtBC,EAAsBD,EAAzBE,EAAaC,EAAYH,EAAfI,EAC/CA,EAAI,EAAGA,EAAIN,EAAOO,UAAUC,OAAQF,GAAK,EAChD,IAAK,IAAIF,EAAI,EAAGA,EAAIJ,EAAOO,UAAUD,GAAGE,OAAQJ,GAAK,EACnD,GAA+B,IAA3BJ,EAAOO,UAAUD,GAAGF,MAEnBH,EAAMK,EAAIN,EAAOS,IAAIH,EAAID,KACzBJ,EAAMK,EAAIN,EAAOS,IAAIH,EAAID,GAAOD,EAAIJ,EAAOS,IAAIL,EAAID,IAElD,UADFF,EAAMK,EAAIN,EAAOS,IAAIH,EAAID,GAAOD,EAAIJ,EAAOS,IAAIL,EAAID,GAAO,IAG1D,OAAO,qyBChBV,IAAMO,EAAsBC,IAAOC,IAAVC,KAqBnBC,EAAeH,IAAOC,IAAVG,gBCvBZC,EAAa,CACxBC,EAAG,CAAEC,MAAO,CAAC,CAAC,IAAKC,MAAO,WAC1BC,EAAG,CACDF,MAAO,CACL,CAAC,EAAG,IAAK,EAAG,GACZ,CAAC,EAAG,IAAK,EAAG,GACZ,CAAC,EAAG,IAAK,EAAG,GACZ,CAAC,EAAG,IAAK,EAAG,IAEdC,MAAO,gBAETE,EAAG,CACDH,MAAO,CACL,CAAC,EAAG,IAAK,GACT,CAAC,EAAG,IAAK,GACT,CAAC,IAAK,IAAK,IAEbC,MAAO,eAETG,EAAG,CACDJ,MAAO,CACL,CAAC,EAAG,IAAK,GACT,CAAC,EAAG,IAAK,GACT,CAAC,EAAG,IAAK,MAEXC,MAAO,gBAETI,EAAG,CACDL,MAAO,CACL,CAAC,IAAK,KACN,CAAC,IAAK,MAERC,MAAO,gBAETK,EAAG,CACDN,MAAO,CACL,CAAC,EAAG,IAAK,KACT,CAAC,IAAK,IAAK,GACX,CAAC,EAAG,EAAG,IAETC,MAAO,eAETM,EAAG,CACDP,MAAO,CACL,CAAC,EAAG,EAAG,GACP,CAAC,IAAK,IAAK,KACX,CAAC,EAAG,IAAK,IAEXC,MAAO,gBAETO,EAAG,CACDR,MAAO,CACL,CAAC,IAAK,IAAK,GACX,CAAC,EAAG,IAAK,KACT,CAAC,EAAG,EAAG,IAETC,MAAO,gBAIEQ,EAAkB,WAC7B,IACMC,EADa,UAENC,KAAKC,MAAMD,KAAKE,SAFV,UAEgCvB,SACnD,OAAOQ,EAAWY,IC7DPI,EAAW,SAAChC,EAAQiC,GAAgB,IAAAC,EACrBC,mBAASxC,KADYyC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACxCjC,EADwCmC,EAAA,GACjCG,EADiCH,EAAA,GAAAI,EAETL,mBAAS,GAFAM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAExCE,EAFwCD,EAAA,GAE3BE,EAF2BF,EAAA,GA8C/C,OA1CAG,oBAAU,WACRD,EAAe,GAEf,IAYME,EAAc,SAACC,GACnB,IAAMC,EAAWD,EAAUE,IAAI,SAACC,GAAD,OAC7BA,EAAID,IAAI,SAACE,GAAD,MAAuB,UAAZA,EAAK,GAAiB,CAAC,EAAG,SAAWA,MAc1D,OAXAlD,EAAOO,UAAU4C,QAAQ,SAACF,EAAK3C,GAC7B2C,EAAIE,QAAQ,SAACC,EAAOhD,GACJ,IAAVgD,IACFL,EAASzC,EAAIN,EAAOS,IAAIH,GAAGF,EAAIJ,EAAOS,IAAIL,GAAK,CAC7CgD,EAD6C,GAAAC,OAE1CrD,EAAOsD,SAAW,SAAW,eAMpCtD,EAAOsD,UACTrB,IA7Bc,SAACc,GAAD,OAChBA,EAASQ,OAAO,SAACC,EAAKP,GACpB,OAAgD,IAA5CA,EAAIQ,UAAU,SAACP,GAAD,OAAsB,IAAZA,EAAK,MAC/BP,EAAe,SAACe,GAAD,OAAUA,EAAO,IAChCF,EAAIG,QAAQ,IAAI/D,MAAMmD,EAAS,GAAGvC,QAAQV,KAAK,CAAC,EAAG,WAC5C0D,IAGTA,EAAII,KAAKX,GACFO,IACN,IAoBMK,CAAUd,IAGZA,GAGTR,EAAS,SAACmB,GAAD,OAAUb,EAAYa,MAC9B,CAAC1D,EAAQiC,IAEL,CAAChC,EAAOsC,EAAUG,6UC/CpB,IAAMoB,EAAcnD,IAAOC,IAAVmD,IAGlB,SAACC,GAAD,OAAWA,EAAMC,QACL,SAACD,GAAD,OAAWA,EAAME,OAED,SAACF,GAAD,OAAWA,EAAME,oSCN5C,IAAMC,EAAaxD,IAAOC,IAAVwD,IAEF,SAAAJ,GAAK,OAAIA,EAAM7C,OACxB,SAAA6C,GAAK,OAAoB,IAAfA,EAAMK,KAAa,YAAc,aACzB,SAAAL,GAAK,OAAIA,EAAM7C,OAChB,SAAA6C,GAAK,OAAIA,EAAM7C,OACjB,SAAA6C,GAAK,OAAIA,EAAM7C,OACd,SAAA6C,GAAK,OAAIA,EAAM7C,QCD5BmD,MAAMC,KAJR,SAAArE,GAAA,IAAGmE,EAAHnE,EAAGmE,KAAH,OACXG,EAAAC,EAAAC,cAACP,EAAD,CAAYE,KAAMA,EAAMlD,MAAOH,EAAWqD,GAAMlD,UCMnCwD,EAND,SAAAzE,GAAA,IAAGD,EAAHC,EAAGD,MAAH,OACZuE,EAAAC,EAAAC,cAACZ,EAAD,CAAaI,MAAOjE,EAAM,GAAGO,OAAQyD,OAAQhE,EAAMO,QAChDP,EAAM+C,IAAI,SAACC,GAAD,OAASA,EAAID,IAAI,SAACE,EAAM9C,GAAP,OAAaoE,EAAAC,EAAAC,cAACE,EAAD,CAAMC,IAAKzE,EAAGiE,KAAMnB,EAAK,+UCL/D,IAAM4B,EAAgBnE,IAAOC,IAAVmE,IAQf,SAACf,GAAD,OAAYA,EAAMgB,SAAW,UAAY,SCHrCC,EAJC,SAAA/E,GAAA,IAAG8E,EAAH9E,EAAG8E,SAAUE,EAAbhF,EAAagF,KAAb,OACdV,EAAAC,EAAAC,cAACI,EAAD,CAAeE,SAAUA,GAAWE,gWCF/B,IAAMC,EAAoBxE,IAAOyE,OAAVC,KCKfC,EAJK,SAAApF,GAAA,IAAGqF,EAAHrF,EAAGqF,SAAUL,EAAbhF,EAAagF,KAAb,OAClBV,EAAAC,EAAAC,cAACS,EAAD,CAAmBK,QAASD,GAAWL,IC0I1BO,EA/HA,WAAM,IAAAvD,EACaC,mBAAS,MADtBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACZwD,EADYtD,EAAA,GACFuD,EADEvD,EAAA,GAAAI,EAEaL,oBAAS,GAFtBM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAEZwC,EAFYvC,EAAA,GAEFmD,EAFEnD,EAAA,GAAAoD,EAGe1D,oBAAS,GAHxB2D,EAAAzD,OAAAC,EAAA,EAAAD,CAAAwD,EAAA,GAGZE,EAHYD,EAAA,GAGDE,EAHCF,EAAA,GAKbG,EAAUC,iBAAO,MALJC,ECVI,WAAM,IAAAjE,EACDC,mBAAS,CACnC1B,IAAK,CAAEL,EAAG,EAAGE,EAAG,GAChBC,UAAWS,EAAW,GAAGE,MACzBoC,UAAU,IAJiBlB,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACtBlC,EADsBoC,EAAA,GACdgE,EADchE,EAAA,GAOvBiE,EAAS,SAACC,EAAQC,GACtB,IAAMC,EAAeF,EAAOtD,IAAI,SAACyD,EAAGC,GAAJ,OAC9BJ,EAAOtD,IAAI,SAAC2D,GAAD,OAASA,EAAID,OAG1B,OAAIH,EAAM,EAAUC,EAAaxD,IAAI,SAACC,GAAD,OAASA,EAAI2D,YAC3CJ,EAAaI,WA+BhB3E,EAAc4E,sBAAY,WAC9BT,EAAU,CACR3F,IAAK,CAAEL,EAAG0G,EAAqBxG,EAAG,GAClCC,UAAWoB,IAAkBT,MAC7BoC,UAAU,KAEX,IAEH,MAAO,CAACtD,EAhBgB,SAAAE,GAAwB,IAArBE,EAAqBF,EAArBE,EAAGE,EAAkBJ,EAAlBI,EAAGgD,EAAepD,EAAfoD,SAC/B8C,EAAU,SAAC1C,GAAD,OAAArB,OAAA0E,EAAA,EAAA1E,CAACA,OAAA0E,EAAA,EAAA1E,CAAA,GACNqB,GADK,IAERjD,IAAK,CAAEL,EAAIsD,EAAKjD,IAAIL,GAAKA,EAAIE,EAAIoD,EAAKjD,IAAIH,GAAKA,GAC/CgD,gBAY6BrB,EApCZ,SAAChC,EAAOsG,GAC3B,IAAMS,EAAeC,KAAKC,MAAMD,KAAKE,UAAUnH,IAC/CgH,EAAazG,UAAY8F,EAAOW,EAAazG,UAAWgG,GAKxD,IAHA,IAAM9F,EAAMuG,EAAavG,IAAIL,EACzBgH,EAAS,EAENrH,EAAeiH,EAAc/G,EAAO,CAAEG,EAAG,EAAGE,EAAG,KAIpD,GAHA0G,EAAavG,IAAIL,GAAKgH,GACtBA,IAAWA,GAAUA,EAAS,EAAI,GAAK,KAE1BJ,EAAazG,UAAU,GAAGC,OAGrC,OAFA6F,EAAOW,EAAazG,WAAYgG,QAChCS,EAAavG,IAAIL,EAAIK,GAIzB2F,EAAUY,KDhBiDK,GAP1CC,EAAAjF,OAAAC,EAAA,EAAAD,CAAA8D,EAAA,GAOZnG,EAPYsH,EAAA,GAOJC,EAPID,EAAA,GAOarF,EAPbqF,EAAA,GAO0BE,EAP1BF,EAAA,GAAAG,EAQoBzF,EAAShC,EAAQiC,GARrCyF,EAAArF,OAAAC,EAAA,EAAAD,CAAAoF,EAAA,GAQZxH,EARYyH,EAAA,GAQLnF,EARKmF,EAAA,GAAAC,EEbQ,SAACjF,GAAgB,IAAAR,EAClBC,mBAAS,GADSC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACrC0F,EADqCxF,EAAA,GAC9ByF,EAD8BzF,EAAA,GAAAI,EAEpBL,mBAAS,GAFWM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAErCsF,EAFqCrF,EAAA,GAE/BsF,EAF+BtF,EAAA,GAAAoD,EAGlB1D,mBAAS,GAHS2D,EAAAzD,OAAAC,EAAA,EAAAD,CAAAwD,EAAA,GAGrCmC,EAHqClC,EAAA,GAG9BmC,EAH8BnC,EAAA,GAKtCoC,EAAa,CAAC,GAAI,IAAK,IAAK,MAE5BC,EAAYtB,sBAAY,WACxBnE,EAAc,IAChBmF,EAAS,SAACnE,GAAD,OAAUA,EAAOwE,EAAWxF,EAAc,IAAMsF,EAAQ,KACjED,EAAQ,SAACrE,GAAD,OAAUA,EAAOhB,MAE1B,CAACsF,EAAOE,EAAYxF,IAMvB,OAJAE,oBAAU,WACRuF,KACC,CAACA,EAAWzF,EAAakF,IAErB,CAACA,EAAOC,EAAUC,EAAMC,EAASC,EAAOC,GFIWG,CATvCV,EAAA,IAAAW,EAAAhG,OAAAC,EAAA,EAAAD,CAAAsF,EAAA,GASZC,EATYS,EAAA,GASLR,EATKQ,EAAA,GASKP,EATLO,EAAA,GASWN,EATXM,EAAA,GASoBL,EATpBK,EAAA,GAS2BJ,EAT3BI,EAAA,GAabC,EAAa,SAAC/B,GACbxG,EAAeC,EAAQC,EAAO,CAAEG,EAAGmG,EAAKjG,EAAG,KAC9CiH,EAAgB,CAAEnH,EAAGmG,EAAKjG,EAAG,KAI3BiI,EAAY,WAChBtC,EAAQuC,QAAQC,QAChBlG,EAAS5C,KACTgG,EAAY,KACZ1D,IACA2D,GAAY,GACZiC,EAAS,GACTE,EAAQ,GACRE,EAAS,GACTjC,GAAa,IAGT0C,EAAO,WACPZ,EAAqB,IAAbE,EAAQ,KAClBC,EAAS,SAACvE,GAAD,OAAUA,EAAO,IAC1BiC,EAAY,KAAQqC,EAAQ,GAAK,MAG9BjI,EAAeC,EAAQC,EAAO,CAAEG,EAAG,EAAGE,EAAG,KAGxCN,EAAOS,IAAIH,EAAI,IACjBsF,GAAY,GACZD,EAAY,OAEd4B,EAAgB,CAAEnH,EAAG,EAAGE,EAAG,EAAGgD,UAAU,KANxCiE,EAAgB,CAAEnH,EAAG,EAAGE,EAAG,EAAGgD,UAAU,KAuBtCqF,EAAO,SAAAC,GAAiB,IAAdC,EAAcD,EAAdC,QACT7D,IACa,KAAZ6D,EACFP,GAAY,GACS,KAAZO,EACTP,EAAW,GACU,KAAZO,GAVblD,EAAY,MACZ+C,KAWyB,KAAZG,GACTrB,EAAavH,EAAO,KAS1B,OG5FK,SAAqBsF,EAAUuD,GACpC,IAAMC,EAAgB7C,mBACtBtD,oBAAU,WACRmG,EAAcP,QAAUjD,GACvB,CAACA,IAEJ3C,oBAAU,WAIR,GAAc,OAAVkG,EAAgB,CAClB,IAAME,EAAKC,YAJb,WACEF,EAAcP,WAGeM,GAC7B,OAAO,WACLI,cAAcF,MAGjB,CAACF,IHwEJK,CAAY,WACVT,KACChD,GAGDlB,EAAAC,EAAAC,cAAChE,EAAD,CACE0I,KAAK,SACLC,SAAS,IACTC,UAAW,SAACC,GAAD,OAAOZ,EAAKY,IACvBC,QApCU,SAAAtJ,GAAiB,IAAd2I,EAAc3I,EAAd2I,QACV7D,GACa,KAAZ6D,GACFlD,EAAY,KAAOqC,EAAQ,GAAK,MAkClCyB,IAAKxD,GAELzB,EAAAC,EAAAC,cAAC5D,EAAD,KACGiF,IAAcf,GACbR,EAAAC,EAAAC,cAAAF,EAAAC,EAAAiF,SAAA,KACElF,EAAAC,EAAAC,cAAA,eACIM,GACAR,EAAAC,EAAAC,cAAAF,EAAAC,EAAAiF,SAAA,KACElF,EAAAC,EAAAC,cAACiF,EAAD,CAASzE,KAAI,UAAA7B,OAAYuE,KACzBpD,EAAAC,EAAAC,cAACiF,EAAD,CAASzE,KAAI,SAAA7B,OAAWyE,KACxBtD,EAAAC,EAAAC,cAACiF,EAAD,CAASzE,KAAI,UAAA7B,OAAY2E,OAI/BxD,EAAAC,EAAAC,cAACkF,EAAD,CAAO3J,MAAOA,MAGhB8F,IAAcf,GACdR,EAAAC,EAAAC,cAAA,OAAKmF,UAAU,WACbrF,EAAAC,EAAAC,cAAA,kBAEEF,EAAAC,EAAAC,cAAA,WAFF,UAKAF,EAAAC,EAAAC,cAACoF,EAAD,CAAavE,SAAUgD,EAAWrD,KAAK,gBAG1CF,GACCR,EAAAC,EAAAC,cAAA,OAAKmF,UAAU,WACbrF,EAAAC,EAAAC,cAAA,iBAEEF,EAAAC,EAAAC,cAAA,WAFF,QAKAF,EAAAC,EAAAC,cAACoF,EAAD,CAAavE,SAAUgD,EAAWrD,KAAK,mBI7HpC6E,EANH,kBACVvF,EAAAC,EAAAC,cAAA,OAAKmF,UAAU,OACbrF,EAAAC,EAAAC,cAACsF,EAAD,QCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/F,EAAAC,EAAAC,cAAC8F,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4aa4c8e2.chunk.js","sourcesContent":["export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\nexport const createStage = () =>\n  Array.from(Array(STAGE_HEIGHT), () =>\n    new Array(STAGE_WIDTH).fill([0, \"clear\"])\n  );\n\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\n  for (let y = 0; y < player.tetromino.length; y += 1) {\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\n      if (player.tetromino[y][x] !== 0) {\n        if (\n          !stage[y + player.pos.y + moveY] ||\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\n            \"clear\"\n        ) {\n          return true;\n        }\n      }\n    }\n  }\n};\n","import styled from \"styled-components\";\n\nexport const StyledTetrisWrapper = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background-size: cover;\n  overflow: hidden;\n  outline: none;\n  display: flex;\n  flex-direction: column;\n\n  .wrapper {\n    width: 20rem;\n    text-align: center;\n\n    h1 {\n      font-family: Pixel, Arial, Helvetica, sans-serif;\n      font-size: 4.6rem;\n      color: #fff;\n    }\n  }\n`;\n\nexport const StyledTetris = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  justify-content: center;\n  min-height: 100vh;\n  padding: 0 2rem;\n  background-color: #222;\n\n  header {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: center;\n    margin-bottom: 1rem;\n  }\n`;\n","export const TETROMINOS = {\n  0: { shape: [[0]], color: \"0, 0, 0\" },\n  I: {\n    shape: [\n      [0, \"I\", 0, 0],\n      [0, \"I\", 0, 0],\n      [0, \"I\", 0, 0],\n      [0, \"I\", 0, 0],\n    ],\n    color: \"80, 227, 230\",\n  },\n  J: {\n    shape: [\n      [0, \"J\", 0],\n      [0, \"J\", 0],\n      [\"J\", \"J\", 0],\n    ],\n    color: \"36, 95, 223\",\n  },\n  L: {\n    shape: [\n      [0, \"L\", 0],\n      [0, \"L\", 0],\n      [0, \"L\", \"L\"],\n    ],\n    color: \"223, 173, 36\",\n  },\n  O: {\n    shape: [\n      [\"O\", \"O\"],\n      [\"O\", \"O\"],\n    ],\n    color: \"223, 217, 36\",\n  },\n  S: {\n    shape: [\n      [0, \"S\", \"S\"],\n      [\"S\", \"S\", 0],\n      [0, 0, 0],\n    ],\n    color: \"48, 211, 56\",\n  },\n  T: {\n    shape: [\n      [0, 0, 0],\n      [\"T\", \"T\", \"T\"],\n      [0, \"T\", 0],\n    ],\n    color: \"132, 61, 198\",\n  },\n  Z: {\n    shape: [\n      [\"Z\", \"Z\", 0],\n      [0, \"Z\", \"Z\"],\n      [0, 0, 0],\n    ],\n    color: \"227, 78, 78\",\n  },\n};\n\nexport const randomTetromino = () => {\n  const tetrominos = \"IJLOSTZ\";\n  const randTetromino =\n    tetrominos[Math.floor(Math.random() * tetrominos.length)];\n  return TETROMINOS[randTetromino];\n};\n","import { useState, useEffect } from \"react\";\nimport { createStage } from \"../gameHelpers\";\n\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n\n  useEffect(() => {\n    setRowsCleared(0);\n\n    const sweepRows = (newStage) =>\n      newStage.reduce((ack, row) => {\n        if (row.findIndex((cell) => cell[0] === 0) === -1) {\n          setRowsCleared((prev) => prev + 1);\n          ack.unshift(new Array(newStage[0].length).fill([0, \"clear\"]));\n          return ack;\n        }\n\n        ack.push(row);\n        return ack;\n      }, []);\n\n    const updateStage = (prevStage) => {\n      const newStage = prevStage.map((row) =>\n        row.map((cell) => (cell[1] === \"clear\" ? [0, \"clear\"] : cell))\n      );\n\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [\n              value,\n              `${player.collided ? \"merged\" : \"clear\"}`,\n            ];\n          }\n        });\n      });\n\n      if (player.collided) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n\n      return newStage;\n    };\n\n    setStage((prev) => updateStage(prev));\n  }, [player, resetPlayer]);\n\n  return [stage, setStage, rowsCleared];\n};\n","import styled from \"styled-components\";\n\nexport const StyledStage = styled.div`\n  display: grid;\n  grid-template-rows: repeat(\n    ${(props) => props.height},\n    calc(45vh / ${(props) => props.width})\n  );\n  grid-template-columns: repeat(${(props) => props.width}, 1fr);\n  grid-gap: 1px;\n  box-shadow: 0px 0px 41px 8px rgba(0, 0, 0, 0.4);\n  width: 100%;\n  max-width: 45vh;\n  background: #111;\n`;\n","import styled from 'styled-components';\n\nexport const StyledCell = styled.div`\n  width: auto;\n  background: rgba(${props => props.color}, 0.8);\n  border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\n  border-bottom-color: rgba(${props => props.color}, 0.1);\n  border-right-color: rgba(${props => props.color}, 1);\n  border-top-color: rgba(${props => props.color}, 1);\n  border-left-color: rgba(${props => props.color}, 0.3);\n`","import React from \"react\";\nimport { StyledCell } from \"./styles\";\nimport { TETROMINOS } from \"../../tetrominos\";\n\nconst Cell = ({ type }) => (\n  <StyledCell type={type} color={TETROMINOS[type].color} />\n);\n\nexport default React.memo(Cell);\n","import React from \"react\";\nimport { StyledStage } from \"./styles\";\n\nimport Cell from \"../Cell\";\n\nconst Stage = ({ stage }) => (\n  <StyledStage width={stage[0].length} height={stage.length}>\n    {stage.map((row) => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\n  </StyledStage>\n);\n\nexport default Stage;\n","import styled from \"styled-components\";\n\nexport const StyledDisplay = styled.div`\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  margin: 0 0.2rem;\n  padding: 0.7rem;\n  border: 2px solid #777;\n  border-radius: 0.5rem;\n  color: ${(props) => (props.gameOver ? \"#ff6d00\" : \"#999\")};\n  font-family: Pixel, Arial, Helvetica, sans-serif;\n  font-size: 0.8rem;\n`;\n","import React from \"react\";\nimport { StyledDisplay } from \"./styles\";\n\nconst Display = ({ gameOver, text }) => (\n  <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\n);\n\nexport default Display;\n","import styled from \"styled-components\";\n\nexport const StyledStartButton = styled.button`\n  box-sizing: border-box;\n  padding: 20px 0;\n  min-height: 30px;\n  width: 100%;\n  border-radius: 10px;\n  border: none;\n  color: white;\n  background: #ff6d00;\n  font-family: Pixel, Arial, Helvetica, sans-serif;\n  font-size: 1rem;\n  outline: none;\n  cursor: pointer;\n`;\n","import React from \"react\";\nimport { StyledStartButton } from \"./styles\";\n\nconst StartButton = ({ callback, text }) => (\n  <StyledStartButton onClick={callback}>{text}</StyledStartButton>\n);\n\nexport default StartButton;\n","import React, { useState, useRef } from \"react\";\n\nimport { checkCollision, createStage } from \"../../gameHelpers\";\n\nimport { StyledTetrisWrapper, StyledTetris } from \"./styles\";\n\nimport { useInterval } from \"../../hooks/useInterval\";\nimport { usePlayer } from \"../../hooks/usePlayer\";\nimport { useStage } from \"../../hooks/useStage\";\nimport { useGameStatus } from \"../../hooks/useGameStatus\";\n\nimport Stage from \"../Stage\";\nimport Display from \"../Display\";\nimport StartButton from \"../StartButton\";\n\nconst Tetris = () => {\n  const [dropTime, setDropTime] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  const [isStarted, setIsStarted] = useState(false);\n\n  const mainRef = useRef(null);\n\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\n    rowsCleared\n  );\n\n  const movePlayer = (dir) => {\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\n      updatePlayerPos({ x: dir, y: 0 });\n    }\n  };\n\n  const startGame = () => {\n    mainRef.current.focus();\n    setStage(createStage());\n    setDropTime(500);\n    resetPlayer();\n    setGameOver(false);\n    setScore(0);\n    setRows(0);\n    setLevel(0);\n    setIsStarted(true);\n  };\n\n  const drop = () => {\n    if (rows > (level + 1) * 10) {\n      setLevel((prev) => prev + 1);\n      setDropTime(1000 / (level + 1) + 200);\n    }\n\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\n      updatePlayerPos({ x: 0, y: 1, collided: false });\n    } else {\n      if (player.pos.y < 1) {\n        setGameOver(true);\n        setDropTime(null);\n      }\n      updatePlayerPos({ x: 0, y: 0, collided: true });\n    }\n  };\n\n  const keyUp = ({ keyCode }) => {\n    if (!gameOver) {\n      if (keyCode === 40) {\n        setDropTime(500 / (level + 1) + 200);\n      }\n    }\n  };\n\n  const dropPlayer = () => {\n    setDropTime(null);\n    drop();\n  };\n\n  const move = ({ keyCode }) => {\n    if (!gameOver) {\n      if (keyCode === 37) {\n        movePlayer(-1);\n      } else if (keyCode === 39) {\n        movePlayer(1);\n      } else if (keyCode === 40) {\n        dropPlayer();\n      } else if (keyCode === 38) {\n        playerRotate(stage, 1);\n      }\n    }\n  };\n\n  useInterval(() => {\n    drop();\n  }, dropTime);\n\n  return (\n    <StyledTetrisWrapper\n      role=\"button\"\n      tabIndex=\"0\"\n      onKeyDown={(e) => move(e)}\n      onKeyUp={keyUp}\n      ref={mainRef}\n    >\n      <StyledTetris>\n        {isStarted && !gameOver && (\n          <>\n            <header>\n              {!gameOver && (\n                <>\n                  <Display text={`Score: ${score}`} />\n                  <Display text={`Rows: ${rows}`} />\n                  <Display text={`Level: ${level}`} />\n                </>\n              )}\n            </header>\n            <Stage stage={stage} />\n          </>\n        )}\n        {!isStarted && !gameOver && (\n          <div className=\"wrapper\">\n            <h1>\n              React\n              <br />\n              Tetris\n            </h1>\n            <StartButton callback={startGame} text=\"Start Game\" />\n          </div>\n        )}\n        {gameOver && (\n          <div className=\"wrapper\">\n            <h1>\n              Game\n              <br />\n              Over\n            </h1>\n            <StartButton callback={startGame} text=\"Play Again\" />\n          </div>\n        )}\n      </StyledTetris>\n    </StyledTetrisWrapper>\n  );\n};\n\nexport default Tetris;\n","import { useState, useCallback } from \"react\";\n\nimport { TETROMINOS, randomTetromino } from \"../tetrominos\";\nimport { STAGE_WIDTH, checkCollision } from \"../gameHelpers\";\n\nexport const usePlayer = () => {\n  const [player, setPlayer] = useState({\n    pos: { x: 0, y: 0 },\n    tetromino: TETROMINOS[0].shape,\n    collided: false,\n  });\n\n  const rotate = (matrix, dir) => {\n    const rotatedTetro = matrix.map((_, index) =>\n      matrix.map((col) => col[index])\n    );\n\n    if (dir > 0) return rotatedTetro.map((row) => row.reverse());\n    return rotatedTetro.reverse();\n  };\n\n  const playerRotate = (stage, dir) => {\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\n      clonedPlayer.pos.x += offset;\n      offset = -(offset + (offset > 0 ? 1 : -1));\n\n      if (offset > clonedPlayer.tetromino[0].length) {\n        rotate(clonedPlayer.tetromino, -dir);\n        clonedPlayer.pos.x = pos;\n        return;\n      }\n    }\n    setPlayer(clonedPlayer);\n  };\n\n  const updatePlayerPos = ({ x, y, collided }) => {\n    setPlayer((prev) => ({\n      ...prev,\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\n      collided,\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n      tetromino: randomTetromino().shape,\n      collided: false,\n    });\n  }, []);\n\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n};\n","import { useState, useCallback, useEffect } from \"react\";\n\nexport const useGameStatus = (rowsCleared) => {\n  const [score, setScore] = useState(0);\n  const [rows, setRows] = useState(0);\n  const [level, setLevel] = useState(0);\n\n  const linePoints = [40, 100, 300, 1200];\n\n  const calcScore = useCallback(() => {\n    if (rowsCleared > 0) {\n      setScore((prev) => prev + linePoints[rowsCleared - 1] * (level + 1));\n      setRows((prev) => prev + rowsCleared);\n    }\n  }, [level, linePoints, rowsCleared]);\n\n  useEffect(() => {\n    calcScore();\n  }, [calcScore, rowsCleared, score]);\n\n  return [score, setScore, rows, setRows, level, setLevel];\n};\n","import { useEffect, useRef } from \"react\";\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport Tetris from \"./components/Tetris/index\";\n\nconst App = () => (\n  <div className=\"App\">\n    <Tetris />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}